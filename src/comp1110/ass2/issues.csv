title,description
Ass 2 | Task 1: Setup,"**Fork the assignment 2 repo, clone it, explore the code.**

- [ ] **One group member** should use GitLab to fork the assignment from the class account.  See [lab one](https://gitlab.cecs.anu.edu.au/comp1110/comp1110-labs/blob/master/src/comp1110/lab1/README.md) if you've forgotten how to do this.
- [ ] Establish your group name (your tutor will assign it to you) and [rename your repo accordingly](https://cs.anu.edu.au/courses/comp1110/assessments/deliverables/#D2A).
- [ ] Verify your repo name with your tutor after the renaming.
- [ ] Edit, commit, and push the `admin/members.yml` file.
- [ ] Each group member should clone the repo.
- [ ] Set up the repo for [upstream pulls](https://gitlab.cecs.anu.edu.au/comp1110/comp1110-labs/blob/master/src/comp1110/lab4/README.md#gitlab-upstream-pulls-for-assignment).
- [ ] Exchange contact information among group members.
- [ ] Set a regular meeting time."
Ass 2 | Task 2: well-formed shared state,"**Fix the isSharedStateWellFormed method**

- [ ] Fix the `isSharedStateWellFormed()` method of the `Azul` class so that it works correctly.
- [ ] Once done, be sure to update your originality statement, commit your work, push to your
    repo, and close this issue."
Ass 2 | Task 3: well-formed player state,"**Fix the isPlayerStateWellFormed method**

- [ ] Fix the `isPlayerStateWellFormed()` method of the `Azul` class so that it works correctly.
- [ ] Once done, be sure to update your originality statement, commit your work, push to your
    repo, and close this issue."
Ass 2 | Task 4: simple placement viewer,"You need to enhance the `Viewer` class so that it displays state visually, according to strings input via the text box. You may want to look at the code for the `TranscriberGUI` class of assignment one to get some ideas.

You may wish to use the following steps:

- [ ] Display images of pieces in the window (anywhere)
- [ ] Draw images of the game areas (both shared and player areas)
- [ ] Translate piece positions to appropriate x and y positions in the window.
- [ ] Break placement strings into tile placements.
- [ ] Fix the `displayState()` method of the `Viewer` class so that it works correctly.
- [ ] Once done, be sure to update your  originality statement, commit your work, push to your
    repo, and close this issue."
Ass 2 | Task 5: draw tile from bag,"**Select a random tile from the bag.**

- [ ] Fix the `drawTileFromBag()` method of the `Azul` class so that it works correctly.
- [ ] Once done, be sure to update your  originality statement, commit your work, push to your
    repo, and close this issue."
Ass 2 | Task 6: refill factories,"**Generate a random selection of tiles for factories.**

- [ ] Fix the `refillFactories()` method of the `Azul` class so that it works correctly.
- [ ] Once done, be sure to update your  originality statement, commit your work, push to your
    repo, and close this issue."
Ass 2 | Task 7: calculate bonus points,"**Calculate the bonus points awarded to a player at the end of the game.**

- [ ] Fix the `getBonusPoints()` method of the `Azul` class so that it works correctly.
- [ ] Once done, be sure to update your  originality statement, commit your work, push to your
    repo, and close this issue."
Ass 2 | Task 8: prepare for next round,"**Assuming a round is complete (all drafting and tiling moves have been completed), update player scores and prepare the board for the next round.**

- [ ] Fix the `nextRound()` method of the `Azul` class so that it works correctly.
- [ ] Once done, be sure to update your  originality statement, commit your work, push to your
    repo, and close this issue."
Ass 2 | Task 9: valid state,"**Determine whether given shared and player states are valid.**

- [ ] Fix the `isStateValid()` method of the `Azul` class so that it works correctly.
- [ ] Once done, be sure to update your  originality statement, commit your work, push to your
    repo, and close this issue."
Ass 2 | Task 10: valid moves,"**Determine whether a given move is valid given (valid) current shared and player states.**

- [ ] Fix the `isMoveValid()` method of the `Azul` class so that it works correctly.
- [ ] Once done, be sure to update your  originality statement, commit your work, push to your
    repo, and close this issue."
Ass 2 | Task 11: apply move,"**Given a valid current state and a valid move, update the state.**

- [ ] Fix the `applyMove()` method of the `Azul` class so that it works correctly.
- [ ] Once done, be sure to update your  originality statement, commit your work, push to your
    repo, and close this issue."
Ass 2 | Task 12: basic working Azul game,"**Implement a basic playable Azul game in JavaFX**

This task is quite involved.

- [ ] Ensure that the player can move tiles on the screen provided by your `Game`:
    - snapping them to the nearest location
    - resulting in a valid drafting or tiling move
- [ ] Ensure that you can check whether the move is valid.   If the move is not valid, don't allow the player to move the tile.
- [ ] Once done, be sure to update your originality statement, commit your work, push to your repo, and close this issue."
Ass 2 | Task 13: generate actions,"**Generate a valid move string for a turn of Azul.**

This task is relatively easy because you just need to find valid moves for a given turn.

- [ ] Fix the `generateAction()` method of the `Azul` class so that it generates a valid move.
- [ ] Once completed, update your originality statement, commit your work, push to your repo, and close this issue."
Ass 2 | Task 14: computer opponent,"**Allow players of your Azul game to play against your simple agent**

Your agent need not yet be advanced. A human player should be able to play your game against a computer opponent, controlled by your simple agent.

- [ ] Extend the game to include a computer opponent
- [ ] Once completed, update your originality statement, commit your work, push to your repo, and close this issue."
Ass 2 | Task 15: good computer opponent,"**Develop a good computer opponent**

This task is more difficult because you need to consider what makes a good move in Azul, i.e. what actions will result in a higher score at the end of the game.

- [ ] Integrate a more advanced opponent into your game.
- [ ] Once completed, update your originality statement, commit your work, push to your repo, and close this issue."
Ass 2 | Task 16: Variants,"**Implement interesting variant(s) of your choice**

Enhance your game to support variations. Some ideas including allowing for up to four players to the play the game, or enhancing the GUI in a meaningful way. Note that this task is very difficult without a well-structured class breakdown.

- [ ] Add an interesting variant to your game.
- [ ] Once completed, update your originality statement, commit your work, push to your repo, and close this issue."